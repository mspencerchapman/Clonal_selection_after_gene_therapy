plot_category_tip_point,
tree=tree,
details=NULL,
cat_df=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%dplyr::rename("sample"=Sample),
cat_name="Sample_type",
cols=cell_type_colours,
cex=0.5,
lwd=0.1
)
hm<-matrix(nrow=3,ncol=length(tree$tip.label),dimnames = list(c("Sample type","VCN","CNA"),tree$tip.label))
for(i in 1:ncol(hm)){
col1<-cell_type_colours[sample_metadata$Sample_type[sample_metadata$Sample==tree$tip.label[i]]]
col2<-VCN_colours[as.character(sapply(sample_metadata$VCN_rounded[sample_metadata$Sample==tree$tip.label[i]],function(n) ifelse(n<5,n,"≥5")))]
hm[1,i]<-col1[1]; hm[2,i]<-col2[1]
for(i in 1:ncol(hm)){hm[3,i]<-ifelse(colnames(hm)[i]%in%CN_change_df$Sample,"purple","lightgrey")}
hm[,"Ancestral"]<-"white"
}
legend("topleft", inset=c(.01,.01), title="Sample type",
names(cell_type_colours), fill=cell_type_colours, horiz=F, cex=0.7)
if(!is.na(max_VCN)){
tree=add_heatmap(tree,heatmap=hm,cex.label = 0.7)
legend("topleft", inset=c(.01,0.2), title="VCN",
names(VCN_colours), fill=VCN_colours, horiz=F, cex=0.7)
} else {
tree=add_heatmap(tree,heatmap=hm[c(1,3),,drop=F],cex.label = 0.7)
}
})
dev.off()
par(mfrow=c(1,1))
print(details%>%
dplyr::filter(coding_change_chip=="yes")%>%
dplyr::select(mut_ref,variant_ID))
#Select out just the cell types/ VCNs present in this sample set
cell_type_colours<-cell_type_colours[which(names(cell_type_colours)%in%(sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(Sample_type)))]
max_VCN=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(VCN_rounded)%>%max()
#Plot the tree
tree=plot_tree(tree,cex.label=0,vspace.reserve=0.05)
temp=plot_tree_labels(tree,
details,
type="line",
query.field = "Decision", #alternative is 'coding_change_chip'
data.frame(value=c("Oncogenic","Possible","Probable"),col="red",pch = 17,stringsAsFactors = FALSE), #if use 'coding_change_chip', value is 'Coding change mutation in driver'
label.field = "variant_ID",
cex.label = 0.8,
lty=2,
lwd=2)
sapply(tree$tip.label,
plot_category_tip_point,
tree=tree,
details=NULL,
cat_df=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%dplyr::rename("sample"=Sample),
cat_name="Sample_type",
cols=cell_type_colours,
cex=0.5,
lwd=0.1
)
cell_type_colours
head(sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%dplyr::rename("sample"=Sample))
View(sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%dplyr::rename("sample"=Sample))
scales::show_col(cell_type_colours)
cell_type_colours
#Plot the tree
tree=plot_tree(tree,cex.label=0,vspace.reserve=0.05)
temp=plot_tree_labels(tree,
details,
type="line",
query.field = "Decision", #alternative is 'coding_change_chip'
data.frame(value=c("Oncogenic","Possible","Probable"),col="red",pch = 17,stringsAsFactors = FALSE), #if use 'coding_change_chip', value is 'Coding change mutation in driver'
label.field = "variant_ID",
cex.label = 0.8,
lty=2,
lwd=2)
cat_df=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%dplyr::rename("sample"=Sample)
head(cat_df)
View(cat_df)
plot_category_tip_point
cols
cols=cell_type_colours
cols
names(cols)<-cat_df%>%pull(cat_name)%>%unique()
cat_name="Sample_type"
cat_df%>%pull(cat_name)%>%unique()
plot_category_tip_point = function(sample_ID,tree,details=NULL,cat_df,cat_name="cat",cols=RColorBrewer::brewer.pal(8,"Set1"),col="black",...) {
all_categories<-cat_df%>%pull(cat_name)%>%unique()
if(!all_categories%in%names(cols)) {
cols=cols[1:length(cat_df%>%pull(cat_name)%>%unique())]
names(cols)<-sort(all_categories)
}
node=which(tree$tip.label==sample_ID)
info=get_edge_info(tree,details,node)
tip_col=cols[cat_df%>%filter(sample==sample_ID)%>%pull(cat_name)]
points(x=info$x,y=info$yb,type="p",pch=21,bg=tip_col,col=col,...)
}
#Create plots
pdf(paste0(plots_dir,"/Sickle_full_phylos.pdf"),width=15,6)
par(mfrow=c(1,1))
temp=Map(tree=all.trees.cc.nodups,details=all.muts.nodups,f=function(tree,details){
print(details%>%
dplyr::filter(coding_change_chip=="yes")%>%
dplyr::select(mut_ref,variant_ID))
#Select out just the cell types/ VCNs present in this sample set
cell_type_colours<-cell_type_colours[which(names(cell_type_colours)%in%(sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(Sample_type)))]
max_VCN=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(VCN_rounded)%>%max()
#if(!is.na(max_VCN)) {VCN_colours<-VCN_colours[1:(1+max_VCN)]}
#Plot the tree
tree=plot_tree(tree,cex.label=0,vspace.reserve=0.05)
temp=plot_tree_labels(tree,
details,
type="line",
query.field = "Decision", #alternative is 'coding_change_chip'
data.frame(value=c("Oncogenic","Possible","Probable"),col="red",pch = 17,stringsAsFactors = FALSE), #if use 'coding_change_chip', value is 'Coding change mutation in driver'
label.field = "variant_ID",
cex.label = 0.8,
lty=2,
lwd=2)
sapply(tree$tip.label,
plot_category_tip_point,
tree=tree,
details=NULL,
cat_df=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%dplyr::rename("sample"=Sample),
cat_name="Sample_type",
cols=cell_type_colours,
cex=0.5,
lwd=0.1
)
hm<-matrix(nrow=3,ncol=length(tree$tip.label),dimnames = list(c("Sample type","VCN","CNA"),tree$tip.label))
for(i in 1:ncol(hm)){
col1<-cell_type_colours[sample_metadata$Sample_type[sample_metadata$Sample==tree$tip.label[i]]]
col2<-VCN_colours[as.character(sapply(sample_metadata$VCN_rounded[sample_metadata$Sample==tree$tip.label[i]],function(n) ifelse(n<5,n,"≥5")))]
hm[1,i]<-col1[1]; hm[2,i]<-col2[1]
for(i in 1:ncol(hm)){hm[3,i]<-ifelse(colnames(hm)[i]%in%CN_change_df$Sample,"purple","lightgrey")}
hm[,"Ancestral"]<-"white"
}
legend("topleft", inset=c(.01,.01), title="Sample type",
names(cell_type_colours), fill=cell_type_colours, horiz=F, cex=0.7)
if(!is.na(max_VCN)){
tree=add_heatmap(tree,heatmap=hm,cex.label = 0.7)
legend("topleft", inset=c(.01,0.2), title="VCN",
names(VCN_colours), fill=VCN_colours, horiz=F, cex=0.7)
} else {
tree=add_heatmap(tree,heatmap=hm[c(1,3),,drop=F],cex.label = 0.7)
}
})
dev.off()
warnings()
all_categories<-cat_df%>%pull(cat_name)%>%unique()
all_categories
!all_categories%in%names(cols)
all(all_categories%in%names(cols))
!all(all_categories%in%names(cols))
tree=all.trees.cc.nodups$BCL006
print(details%>%
dplyr::filter(coding_change_chip=="yes")%>%
dplyr::select(mut_ref,variant_ID))
#Select out just the cell types/ VCNs present in this sample set
cell_type_colours<-cell_type_colours[which(names(cell_type_colours)%in%(sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(Sample_type)))]
max_VCN=sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(VCN_rounded)%>%max()
max_VCN
sample_metadata%>%dplyr::filter(Sample%in%tree$tip.label)%>%pull(VCN_rounded)
View(sample_metadata%>%filter(sample_status=="PASS"&ID=="BCL006"))
View(sample_metadata%>%filter(sample_status=="PASS"&ID=="BCL006"&Sample=="PD53374b_lo0204"))
library(dplyr)
library(ggplot2)
library(tidyr)
library(Rsamtools)
library(Ckmeans.1d.dp)
exp_IDs<-c("BCL002","BCL003","BCL004","BCL006","BCL008","BCL009")
Individual_metadata=data.frame(ID=exp_IDs,
new_ID=c("SCD4","SCD6","SCD6","SCD3","SCD1","SCD2"),
Disease=rep("SCD",6),
Age_at_GT=c(20,26,24,16,7,13),
PD_no=c("PD49229","PD53373b","PD49228","PD53374b","PD49227","PD49226"))
#Define paths for the script
root_dir<-"~/R_work/Gene_therapy/Gene_therapy_for_SCD_NEJM"
setwd(paste0(root_dir,"/Data/vector_paired_files/"))
paired_files=list.files(path = paste0(root_dir,"/Data/vector_paired_files/"),pattern=".*vector_paired.txt")
paired_list=lapply(paired_files,function(file) {if(file.info(file)$size!=0) {read.delim(file,header=F,stringsAsFactors = F)}})
names(paired_list)<-substr(paired_files,1,15)
#paired_list<-paired_list[-which(sapply(paired_list, is.null))]
paired_list<-lapply(paired_list,function(df) if(is.null(df)){return(NULL)}else{df<-df %>% mutate_at(c("V2","V3","V7"), as.character); df<-df[!is.na(df$V4),];return(df[,1:7])})
paired_list<-Map(f=function(df,Sample_ID) if(is.null(df)){return(NULL)}else{cbind(df,data.frame(Sample=rep(Sample_ID,nrow(df))))},df=paired_list,Sample_ID=names(paired_list))
all_reads=dplyr::bind_rows(paired_list)
# all_reads%>%
#   filter(!(V3==4&V4>124680000 &V4<124695000))%>% #15kb region
#   filter(!(V3==4&V4>187394000 &V4<187395000))%>% #1kb region
#   filter(!(V3==11&V4>61735000 &V4<61735500))%>% #0.5kb region
#   filter(!(V3==11&V4>5240000 &V4<5350000))%>% #1Mb region
#   filter(!(V3==2&V4>33141000 &V4<33142000))%>%
#   mutate(V3=factor(V3,levels=c(1:22,"X","Y","hs37d5")))%>%
#   #filter(V3=="15")%>%
#   ggplot(aes(x=Sample,y=V4,col=V5))+
#   geom_jitter(alpha=0.5)+
#   facet_grid(cols=vars(V3),scales="free_x",space = "free")+
#   theme(axis.text.x = element_blank(),axis.text.y = element_text(size=5))+
#   coord_flip()
n_read_threshold=4
VIS_list=lapply(paired_list,function(df) {
if(is.null(df)){stop(return(NULL))}
#First remove PCR duplicates
df<-df[!is.na(df$V2)&df$V2!=""&!is.na(df$V5),]
df$V2<-as.integer(df$V2)
df<-df[!as.logical(sapply(df$V2,bamFlagAsBitMatrix)[11,]),]
#Remove reads that are from erroneous mapping
df<-df%>%
filter(!(V3==4&V4>124680000 &V4<124695000))%>% #15kb region
filter(!(V3==4&V4>187394000 &V4<187395000))%>% #1kb region
filter(!(V3==11&V4>61735000 &V4<61735500))%>% #0.5kb region
filter(!(V3==11&V4>5240000 &V4<5350000))%>% #1Mb region
filter(!(V3==2&V4>33141000 &V4<33142000)) #1kb region
#Now divide the list up by chromosome
chroms=unique(df$V3)
chroms=chroms[!is.na(chroms)&chroms!=""]
out_by_chrom=lapply(chroms, function(chrom) {
df_chrom<-df%>%filter(V3==chrom)
if(nrow(df_chrom)<n_read_threshold){
return(NULL)
} else {
result <- Ckmedian.1d.dp(df_chrom$V4,k=c(1,3))
result_short=dplyr::bind_rows(result[c(2,4)])
#Merge clusters that are a single VIS
i=1
while(i<nrow(result_short)) {
if((result_short$centers[i+1]-result_short$centers[i])<1000) {
result_short$size[i]<-result_short$size[i]+result_short$size[i+1]
result_short$centers[i]<-round(mean(result_short$centers[i:(i+1)]))
result_short<-result_short[-(i+1),]
} else {
i=i+1
}
}
#Only include clusters with (i) adequate reads supporting it (ii) not at sites with known homology with vector
pass_clusters=which(result_short$size>=n_read_threshold & (chrom!=11|abs(result_short$centers-5303264)>10000) & (chrom!=4|abs(result_short$centers-124683707)>10000))
if(length(pass_clusters)>0) {
VIS=paste(chrom,result_short$centers[pass_clusters],sep=":")
return(VIS)
} else {
return(NULL)
}
}
})
out_by_chrom<-unlist(out_by_chrom)
return(out_by_chrom)
})
VIS_df<-dplyr::bind_rows(Map(VIS=VIS_list,Sample=names(VIS_list),f = function(VIS,Sample){data.frame(Sample=rep(Sample,length(VIS)),Chrom_pos=VIS)}))%>%
separate(Chrom_pos,into=c("Chrom","Pos"),sep=":")%>%
mutate(Pos=as.integer(Pos))
VCN_by_VIS=data.frame(Sample=names(VIS_list),VCN_by_VIS=sapply(VIS_list,length))
write.table(VIS_df,file=paste0(root_dir,"/Data/VIS_from_WGS_df.txt"),row.names = F,quote=F,sep="\t")
write.table(VCN_by_VIS,file=paste0(root_dir,"/Data/VCN_by_VIS.txt"),row.names = F,quote=F,sep = "\t")
sample_metadata<-read.delim(paste0(root_dir,"/Data/metadata_temp_updated.tsv"))
sens_df<-sample_metadata%>%
dplyr::select(Sample,somatic_SNV_sensitivity)%>%
dplyr::rename("SNV_sensitivity"=somatic_SNV_sensitivity)%>%
rbind(data.frame(Sample="Ancestral",SNV_sensitivity=1))%>%
filter(!duplicated(Sample))
sample_metadata<-Library_QC_results%>%
dplyr::filter(!duplicated(Sample))%>%
right_join(sample_metadata)
##6. Perform an asymptotic regression step on the INDEL and SNV mutation burdens
## This makes use of the higher coverage samples in the sample set to correct the lower coverage samples to their level
## The asymptotic regression assumes as asymptotic relationship between coverage and number of called mutations
test_groups=expand.grid(c("BCL002","BCL003","BCL004","BCL006","BCL008","BCL009"),c("Pre","Post"))
AR_results<-lapply((1:nrow(test_groups))[-c(4,6,10,12)],function(i) {
exp_ID=test_groups$Var1[i]
print(exp_ID)
if(test_groups$Var2[i]=="Pre") {
test_samples=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point==0)%>%
dplyr::select(Sample,ID,Time_point,Coverage,peak_vaf,SNV_burden_u,INDEL_burden_u,SNV_burden_raw,INDEL_burden_raw)
model_samples=test_samples%>%filter(!is.na(SNV_burden_raw)&
peak_vaf>0.46&
INDEL_burden_raw!=0)
} else if(test_groups$Var2[i]=="Post"){
test_samples=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point>0)%>%
dplyr::select(Sample,ID,Time_point,Coverage,peak_vaf,SNV_burden_u,INDEL_burden_u,SNV_burden_raw,INDEL_burden_raw)
if(nrow(test_samples)==0){stop(return(NULL))}
high_coverage_timepoint=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point)%>%
group_by(Time_point,"high_cov"=Coverage>25)%>%
summarise(n=n())%>%
filter(high_cov&n>5)%>%
pull(Time_point)
model_samples=test_samples%>%filter(Time_point==high_coverage_timepoint&
!is.na(SNV_burden_raw)&
peak_vaf>0.46&
INDEL_burden_raw!=0)
}
#Define the SNV regression model
#Model is defined with samples from a single time point - one that includes higher coverage samples
# dummy_data=data.frame(Coverage=c(4,6),
#                       SNV_burden_u=c(0,0.5*model_samples%>%filter(Coverage>30)%>%pull(SNV_burden_u)%>%mean())
# )
#
# model.as.SNV = NLSstAsymptotic(sortedXyData(c(model_samples$Coverage,dummy_data$Coverage),c(model_samples$SNV_burden_u,dummy_data$SNV_burden_u)))
#
model.as.SNV = NLSstAsymptotic(sortedXyData(model_samples$Coverage,model_samples$SNV_burden_u))
mymodel.SNV = function(x){b0 = model.as.SNV[1]; b1 = model.as.SNV[2]; lrc = model.as.SNV[3]; b0 + b1*(1-exp(-exp(lrc) * x))}
#Define INDEL regression
#Model is defined with samples from a single time point - one that includes higher coverage samples
model.as.INDEL = NLSstAsymptotic(sortedXyData(model_samples$Coverage,model_samples$INDEL_burden_u))
mymodel.INDEL = function(x){b0 = model.as.INDEL[1]; b1 = model.as.INDEL[2]; lrc = model.as.INDEL[3]; b0 + b1*(1-exp(-exp(lrc) * x))}
# Plot SNV model
myrange=1:round(max(model_samples$Coverage))
asp.SNV = data.frame(x=myrange, y=unlist(lapply(myrange, FUN=mymodel.SNV)))
pre_correction_plot_SNVs<-ggplot(model_samples)+ylim(1,1000)+xlim(0,50)+
geom_point(aes(x=Coverage,y=SNV_burden_raw,col=factor(Time_point)), data=model_samples, alpha=0.25) +
theme_bw()+scale_fill_brewer(type="qual", palette=3)+geom_line(aes(x=x, y=y), data=asp.SNV)+
labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
# Plot the INDEL model
asp.INDEL = data.frame(x=myrange, y=unlist(lapply(myrange, FUN=mymodel.INDEL)))
pre_correction_plot_INDELs<-ggplot(model_samples)+ylim(1,40)+xlim(0,50)+
geom_point(aes(x=Coverage,y=INDEL_burden_raw,col=factor(Time_point)), data=model_samples, alpha=0.25) +
theme_bw()+scale_fill_brewer(type="qual", palette=3)+geom_line(aes(x=x, y=y),data=asp.INDEL)+
labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
# Normalize mutation burden to a read depth (here I use 30x). Use a depth within your range of coverage.
new_Number_mutations.SNV = function(rd, Number_mutations){
Number_mutations + ( mymodel.SNV(30) - mymodel.SNV(rd)) ## can change depth here
}
new_Number_mutations.INDEL = function(rd, Number_mutations){
Number_mutations + ( mymodel.INDEL(30) - mymodel.INDEL(rd)) ## can change depth here
}
#The model is then applied slightly more broadly - to samples from several post-GT time points
model_samples$SNV_burden_AR = apply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.SNV(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="SNV_burden_u")])))
model_samples$INDEL_burden_AR = apply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.INDEL(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="INDEL_burden_raw")])))
post_correction_plot_SNVs<-ggplot(model_samples,aes(Coverage,SNV_burden_AR,col=factor(Time_point)))+ylim(0,1000)+xlim(0,50)+theme_bw()+
geom_point(alpha=0.25)+geom_smooth(method="lm",size=0.5)+labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
post_correction_plot_INDELs<-ggplot(model_samples,aes(Coverage,INDEL_burden_AR,col=factor(Time_point)))+ylim(0,50)+xlim(0,50)+theme_bw() +
geom_point(alpha=0.25)+geom_smooth(method="lm",size=0.5)+labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
comb_plot=gridExtra::arrangeGrob(pre_correction_plot_SNVs,pre_correction_plot_INDELs,post_correction_plot_SNVs,post_correction_plot_INDELs)
plot(comb_plot)
return(model_samples)
})%>%dplyr::bind_rows()
my_theme<-theme(text = element_text(family="Helvetica"),
axis.text = element_text(size = 5),
axis.title = element_text(size=7),
legend.text = element_text(size=5),
legend.title = element_text(size=7),
strip.text = element_text(size=7),
legend.spacing = unit(1,"mm"),
legend.key.size= unit(5,"mm"))
my_theme
pply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.INDEL(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="INDEL_burden_raw")])))
sample_metadata<-read.delim(paste0(root_dir,"/Data/metadata_temp_updated.tsv"))
sens_df<-sample_metadata%>%
dplyr::select(Sample,somatic_SNV_sensitivity)%>%
dplyr::rename("SNV_sensitivity"=somatic_SNV_sensitivity)%>%
rbind(data.frame(Sample="Ancestral",SNV_sensitivity=1))%>%
filter(!duplicated(Sample))
sample_metadata<-Library_QC_results%>%
dplyr::filter(!duplicated(Sample))%>%
right_join(sample_metadata)
##6. Perform an asymptotic regression step on the INDEL and SNV mutation burdens
## This makes use of the higher coverage samples in the sample set to correct the lower coverage samples to their level
## The asymptotic regression assumes as asymptotic relationship between coverage and number of called mutations
test_groups=expand.grid(c("BCL002","BCL003","BCL004","BCL006","BCL008","BCL009"),c("Pre","Post"))
AR_results<-lapply((1:nrow(test_groups))[-c(4,6,10,12)],function(i) {
exp_ID=test_groups$Var1[i]
print(exp_ID)
if(test_groups$Var2[i]=="Pre") {
test_samples=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point==0)%>%
dplyr::select(Sample,ID,Time_point,Coverage,peak_vaf,SNV_burden_u,INDEL_burden_u,SNV_burden_raw,INDEL_burden_raw)
model_samples=test_samples%>%filter(!is.na(SNV_burden_raw)&
peak_vaf>0.46&
INDEL_burden_raw!=0)
} else if(test_groups$Var2[i]=="Post"){
test_samples=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point>0)%>%
dplyr::select(Sample,ID,Time_point,Coverage,peak_vaf,SNV_burden_u,INDEL_burden_u,SNV_burden_raw,INDEL_burden_raw)
if(nrow(test_samples)==0){stop(return(NULL))}
high_coverage_timepoint=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point)%>%
group_by(Time_point,"high_cov"=Coverage>25)%>%
summarise(n=n())%>%
filter(high_cov&n>5)%>%
pull(Time_point)
model_samples=test_samples%>%filter(Time_point==high_coverage_timepoint&
!is.na(SNV_burden_raw)&
peak_vaf>0.46&
INDEL_burden_raw!=0)
}
#Define the SNV regression model
#Model is defined with samples from a single time point - one that includes higher coverage samples
# dummy_data=data.frame(Coverage=c(4,6),
#                       SNV_burden_u=c(0,0.5*model_samples%>%filter(Coverage>30)%>%pull(SNV_burden_u)%>%mean())
# )
#
# model.as.SNV = NLSstAsymptotic(sortedXyData(c(model_samples$Coverage,dummy_data$Coverage),c(model_samples$SNV_burden_u,dummy_data$SNV_burden_u)))
#
model.as.SNV = NLSstAsymptotic(sortedXyData(model_samples$Coverage,model_samples$SNV_burden_u))
mymodel.SNV = function(x){b0 = model.as.SNV[1]; b1 = model.as.SNV[2]; lrc = model.as.SNV[3]; b0 + b1*(1-exp(-exp(lrc) * x))}
#Define INDEL regression
#Model is defined with samples from a single time point - one that includes higher coverage samples
model.as.INDEL = NLSstAsymptotic(sortedXyData(model_samples$Coverage,model_samples$INDEL_burden_u))
mymodel.INDEL = function(x){b0 = model.as.INDEL[1]; b1 = model.as.INDEL[2]; lrc = model.as.INDEL[3]; b0 + b1*(1-exp(-exp(lrc) * x))}
# Plot SNV model
myrange=1:round(max(model_samples$Coverage))
asp.SNV = data.frame(x=myrange, y=unlist(lapply(myrange, FUN=mymodel.SNV)))
pre_correction_plot_SNVs<-ggplot(model_samples)+ylim(1,1000)+xlim(0,50)+
geom_point(aes(x=Coverage,y=SNV_burden_raw,col=factor(Time_point)), data=model_samples, alpha=0.25) +
theme_bw()+scale_fill_brewer(type="qual", palette=3)+geom_line(aes(x=x, y=y), data=asp.SNV)+
labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
# Plot the INDEL model
asp.INDEL = data.frame(x=myrange, y=unlist(lapply(myrange, FUN=mymodel.INDEL)))
pre_correction_plot_INDELs<-ggplot(model_samples)+ylim(1,40)+xlim(0,50)+
geom_point(aes(x=Coverage,y=INDEL_burden_raw,col=factor(Time_point)), data=model_samples, alpha=0.25) +
theme_bw()+scale_fill_brewer(type="qual", palette=3)+geom_line(aes(x=x, y=y),data=asp.INDEL)+
labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
# Normalize mutation burden to a read depth (here I use 30x). Use a depth within your range of coverage.
new_Number_mutations.SNV = function(rd, Number_mutations){
Number_mutations + ( mymodel.SNV(30) - mymodel.SNV(rd)) ## can change depth here
}
new_Number_mutations.INDEL = function(rd, Number_mutations){
Number_mutations + ( mymodel.INDEL(30) - mymodel.INDEL(rd)) ## can change depth here
}
#The model is then applied slightly more broadly - to samples from several post-GT time points
model_samples$SNV_burden_AR = apply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.SNV(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="SNV_burden_u")])))
model_samples$INDEL_burden_AR = apply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.INDEL(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="INDEL_burden_raw")])))
post_correction_plot_SNVs<-ggplot(model_samples,aes(Coverage,SNV_burden_AR,col=factor(Time_point)))+ylim(0,1000)+xlim(0,50)+theme_bw()+
geom_point(alpha=0.25)+geom_smooth(method="lm",size=0.5)+labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
post_correction_plot_INDELs<-ggplot(model_samples,aes(Coverage,INDEL_burden_AR,col=factor(Time_point)))+ylim(0,50)+xlim(0,50)+theme_bw() +
geom_point(alpha=0.25)+geom_smooth(method="lm",size=0.5)+labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
comb_plot=gridExtra::arrangeGrob(pre_correction_plot_SNVs,pre_correction_plot_INDELs,post_correction_plot_SNVs,post_correction_plot_INDELs)
plot(comb_plot)
return(model_samples)
})%>%dplyr::bind_rows()
library(ggplot2)
sample_metadata<-read.delim(paste0(root_dir,"/Data/metadata_temp_updated.tsv"))
sens_df<-sample_metadata%>%
dplyr::select(Sample,somatic_SNV_sensitivity)%>%
dplyr::rename("SNV_sensitivity"=somatic_SNV_sensitivity)%>%
rbind(data.frame(Sample="Ancestral",SNV_sensitivity=1))%>%
filter(!duplicated(Sample))
sample_metadata<-Library_QC_results%>%
dplyr::filter(!duplicated(Sample))%>%
right_join(sample_metadata)
##6. Perform an asymptotic regression step on the INDEL and SNV mutation burdens
## This makes use of the higher coverage samples in the sample set to correct the lower coverage samples to their level
## The asymptotic regression assumes as asymptotic relationship between coverage and number of called mutations
test_groups=expand.grid(c("BCL002","BCL003","BCL004","BCL006","BCL008","BCL009"),c("Pre","Post"))
AR_results<-lapply((1:nrow(test_groups))[-c(4,6,10,12)],function(i) {
exp_ID=test_groups$Var1[i]
print(exp_ID)
if(test_groups$Var2[i]=="Pre") {
test_samples=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point==0)%>%
dplyr::select(Sample,ID,Time_point,Coverage,peak_vaf,SNV_burden_u,INDEL_burden_u,SNV_burden_raw,INDEL_burden_raw)
model_samples=test_samples%>%filter(!is.na(SNV_burden_raw)&
peak_vaf>0.46&
INDEL_burden_raw!=0)
} else if(test_groups$Var2[i]=="Post"){
test_samples=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point>0)%>%
dplyr::select(Sample,ID,Time_point,Coverage,peak_vaf,SNV_burden_u,INDEL_burden_u,SNV_burden_raw,INDEL_burden_raw)
if(nrow(test_samples)==0){stop(return(NULL))}
high_coverage_timepoint=sample_metadata%>%
dplyr::filter(ID==exp_ID&Time_point)%>%
group_by(Time_point,"high_cov"=Coverage>25)%>%
summarise(n=n())%>%
filter(high_cov&n>5)%>%
pull(Time_point)
model_samples=test_samples%>%filter(Time_point==high_coverage_timepoint&
!is.na(SNV_burden_raw)&
peak_vaf>0.46&
INDEL_burden_raw!=0)
}
#Define the SNV regression model
#Model is defined with samples from a single time point - one that includes higher coverage samples
# dummy_data=data.frame(Coverage=c(4,6),
#                       SNV_burden_u=c(0,0.5*model_samples%>%filter(Coverage>30)%>%pull(SNV_burden_u)%>%mean())
# )
#
# model.as.SNV = NLSstAsymptotic(sortedXyData(c(model_samples$Coverage,dummy_data$Coverage),c(model_samples$SNV_burden_u,dummy_data$SNV_burden_u)))
#
model.as.SNV = NLSstAsymptotic(sortedXyData(model_samples$Coverage,model_samples$SNV_burden_u))
mymodel.SNV = function(x){b0 = model.as.SNV[1]; b1 = model.as.SNV[2]; lrc = model.as.SNV[3]; b0 + b1*(1-exp(-exp(lrc) * x))}
#Define INDEL regression
#Model is defined with samples from a single time point - one that includes higher coverage samples
model.as.INDEL = NLSstAsymptotic(sortedXyData(model_samples$Coverage,model_samples$INDEL_burden_u))
mymodel.INDEL = function(x){b0 = model.as.INDEL[1]; b1 = model.as.INDEL[2]; lrc = model.as.INDEL[3]; b0 + b1*(1-exp(-exp(lrc) * x))}
# Plot SNV model
myrange=1:round(max(model_samples$Coverage))
asp.SNV = data.frame(x=myrange, y=unlist(lapply(myrange, FUN=mymodel.SNV)))
pre_correction_plot_SNVs<-ggplot(model_samples)+ylim(1,1000)+xlim(0,50)+
geom_point(aes(x=Coverage,y=SNV_burden_raw,col=factor(Time_point)), data=model_samples, alpha=0.25) +
theme_bw()+scale_fill_brewer(type="qual", palette=3)+geom_line(aes(x=x, y=y), data=asp.SNV)+
labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
# Plot the INDEL model
asp.INDEL = data.frame(x=myrange, y=unlist(lapply(myrange, FUN=mymodel.INDEL)))
pre_correction_plot_INDELs<-ggplot(model_samples)+ylim(1,40)+xlim(0,50)+
geom_point(aes(x=Coverage,y=INDEL_burden_raw,col=factor(Time_point)), data=model_samples, alpha=0.25) +
theme_bw()+scale_fill_brewer(type="qual", palette=3)+geom_line(aes(x=x, y=y),data=asp.INDEL)+
labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
# Normalize mutation burden to a read depth (here I use 30x). Use a depth within your range of coverage.
new_Number_mutations.SNV = function(rd, Number_mutations){
Number_mutations + ( mymodel.SNV(30) - mymodel.SNV(rd)) ## can change depth here
}
new_Number_mutations.INDEL = function(rd, Number_mutations){
Number_mutations + ( mymodel.INDEL(30) - mymodel.INDEL(rd)) ## can change depth here
}
#The model is then applied slightly more broadly - to samples from several post-GT time points
model_samples$SNV_burden_AR = apply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.SNV(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="SNV_burden_u")])))
model_samples$INDEL_burden_AR = apply(model_samples, MARGIN=1, FUN=function(X)  new_Number_mutations.INDEL(rd=as.numeric(X[which(colnames(model_samples)=="Coverage")]), Number_mutations=as.numeric(X[which(colnames(model_samples)=="INDEL_burden_raw")])))
post_correction_plot_SNVs<-ggplot(model_samples,aes(Coverage,SNV_burden_AR,col=factor(Time_point)))+ylim(0,1000)+xlim(0,50)+theme_bw()+
geom_point(alpha=0.25)+geom_smooth(method="lm",size=0.5)+labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
post_correction_plot_INDELs<-ggplot(model_samples,aes(Coverage,INDEL_burden_AR,col=factor(Time_point)))+ylim(0,50)+xlim(0,50)+theme_bw() +
geom_point(alpha=0.25)+geom_smooth(method="lm",size=0.5)+labs(y="# Mutations",x="Coverage per colony",col="Time point")+my_theme
comb_plot=gridExtra::arrangeGrob(pre_correction_plot_SNVs,pre_correction_plot_INDELs,post_correction_plot_SNVs,post_correction_plot_INDELs)
plot(comb_plot)
return(model_samples)
})%>%dplyr::bind_rows()
