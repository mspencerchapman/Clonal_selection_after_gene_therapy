return(list(mean=pred,upper_95_CI=upper_95_CI,lower_95_CI=lower_95_CI))
}
lm.data=data.frame(x=0:26,ymin=unlist(sapply(0:26,HSC_prediction)['lower_95_CI',]),ymax=unlist(sapply(0:26,HSC_prediction)['upper_95_CI',]))
#Create a summary table of each individual at each time point
#NB. include only the higher coverage samples (>10X) & those with a peak VAF > 0.45 (i.e. the most clonal samples)
Coverage_cutoff_for_mutburden_analysis=10
Peak_vaf_cutoff_for_mutburden_analysis=0.46
SNV_metric_for_mutburden_analysis="SNV_burden_AR"
mut_burden_summary<-sample_metadata%>%
dplyr::filter(!is.na(get(SNV_metric_for_mutburden_analysis)))%>%
dplyr::filter(Coverage>Coverage_cutoff_for_mutburden_analysis & peak_vaf>Peak_vaf_cutoff_for_mutburden_analysis)%>%
mutate(Age_at_sampling=(Time_point+Age_at_GT))%>%
group_by(new_ID,Time_point)%>%
dplyr::summarise(mean_SNV_burden=mean(get(SNV_metric_for_mutburden_analysis)),
var=var(get(SNV_metric_for_mutburden_analysis)),
mean_SNV_burden_invitro_removed=mean(SNV_burden_invitro_removed),
var_invitro_removed=var(SNV_burden_invitro_removed),
Age_at_sampling=Age_at_sampling[1],
Disease=Disease[1])%>%
mutate(expected_mean_SNV_burden=sapply(Age_at_sampling,function(Age) HSC_prediction(Age)$mean))%>%
mutate(excess_mutations=mean_SNV_burden-expected_mean_SNV_burden#,
#excess_mutations_invitro_removed=mean_SNV_burden_invitro_removed-expected_mean_SNV_burden
)%>%
mutate(excess_mutations_per_year=excess_mutations/Age_at_sampling#,
#excess_mutations_per_year_invitro_removedd=excess_mutations_invitro_removed/Age_at_sampling
)
mut_burden_summary
View(mut_burden_summary)
View(mut_burden_summary%>%filter(Time_point==0))
mut_burden_summary<-sample_metadata%>%
dplyr::filter(!is.na(get(SNV_metric_for_mutburden_analysis)))%>%
dplyr::filter(Coverage>Coverage_cutoff_for_mutburden_analysis & peak_vaf>Peak_vaf_cutoff_for_mutburden_analysis)%>%
mutate(Age_at_sampling=(Time_point+Age_at_GT))%>%
group_by(new_ID,Time_point)%>%
dplyr::summarise(mean_SNV_burden=mean(get(SNV_metric_for_mutburden_analysis)),
var=var(get(SNV_metric_for_mutburden_analysis)),
mean_SNV_burden_invitro_removed=mean(SNV_burden_invitro_removed),
var_invitro_removed=var(SNV_burden_invitro_removed),
Age_at_sampling=Age_at_sampling[1],
Disease=Disease[1])%>%
mutate(expected_mean_SNV_burden=sapply(Age_at_sampling,function(Age) HSC_prediction(Age)$mean))%>%
mutate(excess_mutations=mean_SNV_burden-expected_mean_SNV_burden#,
#excess_mutations_invitro_removed=mean_SNV_burden_invitro_removed-expected_mean_SNV_burden
)%>%
mutate(excess_mutations_per_year=excess_mutations/Age_at_sampling,
percentage_excess=mean_SNV_burden/expected_mean_SNV_burden#,
#excess_mutations_per_year_invitro_removed=excess_mutations_invitro_removed/Age_at_sampling
)
View(mut_burden_summary%>%filter(Time_point==0))
View(mut_burden_summary%>%filter(Time_point==0))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(lme4)
GT_sample_metadata<-readRDS("~/R_work/Gene_therapy/Gene_therapy_for_SCD_NEJM/Data/sample_metadata_full_with_sigs.Rds")
EM_sample_metadata<-read.csv("~/R_work/Mitochondrial_analysis/EM_sample_level_metadata.csv")
combined_df<-bind_rows(GT_sample_metadata%>%
filter(!is.na(SNV_burden_AR)&Time_point==0)%>%
dplyr::select(new_ID,Age_at_GT,Sample,SNV_burden_AR,SNV_burden_invitro_removed,INDEL_burden_AR)%>%
mutate(Disease_status="SCD")%>%
dplyr::rename("ID"=new_ID,"Age"=Age_at_GT,"SNV_burden_adj"=SNV_burden_AR,"INDEL_burden_adj"=INDEL_burden_AR),
EM_sample_metadata%>%
dplyr::select(donor_id,age,PDID,sub_adj,indel_adj)%>%
mutate(Disease_status="Healthy")%>%
dplyr::rename("Age"=age,"ID"=donor_id,"Sample"=PDID,"SNV_burden_adj"=sub_adj,"INDEL_burden_adj"=indel_adj)%>%
mutate(SNV_burden_invitro_removed=SNV_burden_adj)
)
head(combined_df)
combined_df%>%
ggplot(aes(x=Age,y=SNV_burden_adj,col=Disease_status))+
geom_jitter(width=0.25,height=0,alpha=0.25,size=0.5)+
theme_classic()+
geom_smooth(method="lm",size=0.5)
lm.age_only <- lm(SNV_burden_adj ~ Age, data = combined_df)
summary(lm.age_only)
lm.age_and_disease <- lm(SNV_burden_adj ~ Age + Disease_status, data = combined_df)
summary(lm.age_and_disease)
lm.age_and_disease_int <- lm(SNV_burden_adj ~ Age + Age:Disease_status, data = combined_df)
summary(lm.age_and_disease_int)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tidyr)
library(lme4)
my_theme<-theme(text = element_text(family="Helvetica"),
axis.text = element_text(size = 5),
axis.title = element_text(size=7),
legend.text = element_text(size=5),
legend.title = element_text(size=7),
strip.text = element_text(size=7),
legend.spacing = unit(1,"mm"),
legend.key.size= unit(5,"mm"))
plots_dir="~/R_work/Gene_therapy/plots_NEJM/"
GT_sample_metadata<-readRDS("~/R_work/Gene_therapy/Gene_therapy_for_SCD_NEJM/Data/sample_metadata_full_with_sigs.Rds")
EM_sample_metadata<-read.csv("~/R_work/Mitochondrial_analysis/EM_sample_level_metadata.csv")
EM_sample_metadata<-read.csv("~/R_work/Mitochondrial_analysis/EM_sample_level_metadata.csv")
combined_df<-bind_rows(GT_sample_metadata%>%
filter(!is.na(SNV_burden_AR)&Time_point==0)%>%
dplyr::select(new_ID,Age_at_GT,Sample,SNV_burden_AR,SNV_burden_invitro_removed,INDEL_burden_AR)%>%
mutate(Disease_status="SCD")%>%
dplyr::rename("ID"=new_ID,"Age"=Age_at_GT,"SNV_burden_adj"=SNV_burden_AR,"INDEL_burden_adj"=INDEL_burden_AR),
EM_sample_metadata%>%
dplyr::select(donor_id,age,PDID,sub_adj,indel_adj)%>%
mutate(Disease_status="Healthy")%>%
dplyr::rename("Age"=age,"ID"=donor_id,"Sample"=PDID,"SNV_burden_adj"=sub_adj,"INDEL_burden_adj"=indel_adj)%>%
mutate(SNV_burden_invitro_removed=SNV_burden_adj)
)
cols=RColorBrewer::brewer.pal(3,"Dark2")
base_plot<-combined_df%>%
ggplot(aes(x=Age,y=SNV_burden_adj,col=Disease_status))+
geom_jitter(width=0.25,height=0,alpha=0.25,size=0.5)+
theme_classic()+
scale_color_manual(values=cols)+
labs(x="Age",y="SNV burden (adjusted)",col="Disease\nstatus")+
my_theme
base_plot+geom_smooth(method="lm",size=0.5)
lmer.age_only <- lmer(SNV_burden_adj ~ Age + (1|ID), data = combined_df)
summary(lmer.age_only)
p.1<-base_plot+geom_abline(intercept = lmer.age_only@beta[1],slope = lmer.age_only@beta[2])+theme(legend.position = "none")
p.1
lmer.age_and_disease <- lmer(SNV_burden_adj ~ Age + Disease_status + (1|ID), data = combined_df)
lmer.age_and_disease <- lmer(SNV_burden_adj ~ Age + Disease_status + (1|ID), data = combined_df)
summary(lmer.age_and_disease)
lmer.age_and_disease_int <- lmer(SNV_burden_adj ~ Age + Age:Disease_status + (1|ID), data = combined_df)
summary(lmer.age_and_disease_int)
confint(lmer.age_and_disease_int)
summary(lmer.age_and_disease_int)
m1 <- nlme::lme(SNV_burden_adj~Age + Age:Disease_status,random=~1|ID,data=combined_df)
anova(m1)
anova(m1)
summary(m1)
sample_metadata%>%group_by(sample_status)%>%dplyr::summarise(n=n())
names(all.muts.nodups)
sum(sapply(all.muts.nodups,nrow))
sum(sapply(all.muts.nodups,function(details) sum(details$Mut_type=="SNV")))
sum(sapply(all.muts.nodups,function(details) sum(details$Mut_type=="INDEL")))
sample_metadata%>%filter(!is.na(Coverage))%>%group_by(new_iD)%>%dplyr::summarise(n=n())
sample_metadata%>%filter(!is.na(Coverage))%>%group_by(new_ID)%>%dplyr::summarise(n=n())
sample_metadata%>%group_by(new_ID,sample_status)%>%dplyr::summarise(n=n())
sample_metadata%>%group_by(new_ID,sample_status)%>%dplyr::summarise(n=n())%>%View()
447+50+2+39
sample_metadata%>%filter(!is.na(Coverage))%>%dplyr::summarise(mean=mean(Coverage))
sample_metadata%>%filter(sample_status=="PASS" & Time_point==0)%>%group_by(new_ID)%>%dplyr::summarise(n=n())
0.8/16.7
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID,Time_point>0)%>%dplyr::summarise(n=n(),mean=mean(SNV_burden_tc))
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID,Time_point>0)%>%dplyr::summarise(n=n(),mean=mean(SNV_burden_tc))%>%pivot_wider(names_from=`Time_point > 0`,values_from="mean")
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID,Time_point>0)%>%dplyr::summarise(mean=mean(SNV_burden_tc))%>%pivot_wider(names_from=`Time_point > 0`,values_from="mean")
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID,Time_point>0)%>%dplyr::summarise(mean=mean(SNV_burden_tc))%>%pivot_wider(names_from=`Time_point > 0`,values_from="mean")%>%mutate(diff=`TRUE`-`FALSE`)
HSC_prediction=function(age){
pred=54.6+16.8*age; upper_95_CI=54.6+16.95*age; lower_95_CI=54.6+16.65*age
return(list(mean=pred,upper_95_CI=upper_95_CI,lower_95_CI=lower_95_CI))
}
lm.data=data.frame(x=0:26,ymin=unlist(sapply(0:26,HSC_prediction)['lower_95_CI',]),ymax=unlist(sapply(0:26,HSC_prediction)['upper_95_CI',]))
#Create a summary table of each individual at each time point
#NB. include only the higher coverage samples (>10X) & those with a peak VAF > 0.45 (i.e. the most clonal samples)
Coverage_cutoff_for_mutburden_analysis=10
Peak_vaf_cutoff_for_mutburden_analysis=0.46
SNV_metric_for_mutburden_analysis="SNV_burden_tc"
mut_burden_summary<-sample_metadata%>%
dplyr::filter(!is.na(get(SNV_metric_for_mutburden_analysis)))%>%
dplyr::filter(Coverage>Coverage_cutoff_for_mutburden_analysis & peak_vaf>Peak_vaf_cutoff_for_mutburden_analysis)%>%
mutate(Age_at_sampling=(Time_point+Age_at_GT))%>%
group_by(new_ID,Time_point)%>%
dplyr::summarise(mean_SNV_burden=mean(get(SNV_metric_for_mutburden_analysis)),
var=var(get(SNV_metric_for_mutburden_analysis)),
mean_SNV_burden_invitro_removed=mean(SNV_burden_invitro_removed),
var_invitro_removed=var(SNV_burden_invitro_removed),
Age_at_sampling=Age_at_sampling[1],
Disease=Disease[1])%>%
mutate(expected_mean_SNV_burden=sapply(Age_at_sampling,function(Age) HSC_prediction(Age)$mean))%>%
mutate(excess_mutations=mean_SNV_burden-expected_mean_SNV_burden#,
#excess_mutations_invitro_removed=mean_SNV_burden_invitro_removed-expected_mean_SNV_burden
)%>%
mutate(excess_mutations_per_year=excess_mutations/Age_at_sampling,
percentage_excess=mean_SNV_burden/expected_mean_SNV_burden#,
#excess_mutations_per_year_invitro_removed=excess_mutations_invitro_removed/Age_at_sampling
)
pre_post_comparison_df<-sample_metadata%>%
dplyr::filter(!is.na(get(SNV_metric_for_mutburden_analysis))&
sample_status=="PASS"&
Coverage>Coverage_cutoff_for_mutburden_analysis&
peak_vaf>Peak_vaf_cutoff_for_mutburden_analysis)%>%
mutate(Age_at_sampling=(Time_point+Age_at_GT))%>%
mutate(SNV_adjusted=get(SNV_metric_for_mutburden_analysis)-(16.8*Time_point))
dim(pre_post_comparison_df)
pre_post_comparison_df%>%
group_by(new_ID,Time_point)%>%
summarize(mean_SNV_burden=mean(get(SNV_metric_for_mutburden_analysis)))
SNV_metric_for_mutburden_analysis="SNV_burden_tc"
pre_post_comparison_df%>%
ggplot(aes(x=factor(Time_point),y=get(SNV_metric_for_mutburden_analysis),col=Cell_type))+
geom_boxplot(aes(group=plate_ID))+
geom_jitter(width = 0.1,alpha=0.2)+
facet_grid(cols=vars(new_ID),scales="free",space = "free")+
theme_bw()+
scale_color_brewer(palette="Dark2")+
labs(x="Time point (months)", y="SNV burden")+
theme(legend.text = element_text(size=7),legend.key.size = unit(3,"mm"))
all.lms<-lapply(paste0("SCD",1:6),function(this_ID) {
cat(this_ID,sep="\n")
res<-lm(get(SNV_metric_for_mutburden_analysis)~Time_point,data=pre_post_comparison_df%>%filter(new_ID==this_ID))
return(res)
})
all.lms.adjusted<-lapply(paste0("SCD",1:6),function(this_ID) {
cat(this_ID,sep="\n")
res<-lm(SNV_adjusted~Time_point,data=pre_post_comparison_df%>%filter(new_ID==this_ID))
return(res)
})
lapply(all.lms.adjusted,confint)
t.test.all<-lapply(paste0("SCD",1:6),function(this_ID) {
t.test.res<-t.test(y=pre_post_comparison_df%>%filter(new_ID==this_ID & Time_point==0)%>%pull(SNV_adjusted),
x=pre_post_comparison_df%>%filter(new_ID==this_ID & Time_point>0)%>%pull(SNV_adjusted),
alternative="two.sided")
return(t.test.res)
})
t.test.all
Map(test=t.test.all,exp_ID=paste0("SCD",1:6),function(test,exp_ID){
data.frame(ID=exp_ID,estimate=test$estimate[1]-test$estimate[2],CI_low=test$conf.int[1],CI_high=test$conf.int[2])
})%>%dplyr::bind_rows()
14/16.7
colnames(sample_metadata)
sample_metadata%>%filter(Time_point>0 & sample_status=="PASS")%>%group_by(VCN_rounded>0)%>%dplyr::summarise(n=n())
680/(680+751)
sample_metadata%>%filter(Time_point>0 & sample_status=="PASS")%>%group_by(new_ID,Time_point,VCN_rounded>0)%>%dplyr::summarise(n=n())
sample_metadata%>%filter(Time_point>0 & sample_status=="PASS")%>%group_by(new_ID)%>%dplyr::summarise(n=n(),nmod=sum(VCN_rounded>0))%>%mutate(prop_mod=nmod/n)
sample_metadata%>%filter(Time_point>0 & sample_status=="PASS")%>%group_by(new_ID,Time_point)%>%dplyr::summarise(n=n(),nmod=sum(VCN_rounded>0))%>%mutate(prop_mod=nmod/n)
sample_metadata%>%filter(Time_point>0 & sample_status=="PASS")%>%group_by(Time_point)%>%summarise(n=n())
sample_metadata%>%filter(Time_point>0 & sample_status=="PASS")%>%group_by(Time_point)%>%dplyr::summarise(n=n())
par(mfrow=c(3,2))
lapply(all.trees.age.nodups,plot.phylo,show.tip.label=F,direction="downwards")
lapply(all.trees.age.nodups,function(tree) {})
D_all_peri_nodes<-
R_all_peri_nodes<-
lapply(all.trees.age.nodups,function(tree) {
nodeheights=nodeHeights(tree)
GT_coal_timing<-nodeheights[,2][!tree$edge[,2]%in%1:length(tree$tip.label) & nodeheights[,2] >5]
})
D_all_peri_nodes<-
R_all_peri_nodes<-
lapply(all.trees.age.nodups,function(tree) {
nodeheights=nodeHeights(tree)
GT_coal_timing<-nodeheights[,2][!tree$edge[,2]%in%1:length(tree$tip.label) & nodeheights[,2] >5]
return(GT_coal_timing)
})
D_all_peri_nodes<-
R_all_peri_nodes<-
lapply(all.trees.age.nodups,function(tree) {
nodeheights=nodeHeights(tree)
GT_coal_timing<-nodeheights[,2][!tree$edge[,2]%in%1:length(tree$tip.label) & nodeheights[,2] >5]
print(GT_coal_timing)
return(GT_coal_timing)
})
Indiviual_metadata$Age_at_GT
Individual_metadata$Age_at_GT
SV_data<-readxl::read_excel(path=paste0(root_dir,"/Data/SV_analysis_sickle_updated050123.xlsx"),sheet=2)
#Filter out events in non-clonal samples
SV_data<-SV_data%>%
filter(sample%in%(sample_metadata%>%dplyr::filter(sample_status!="Non-clonal")%>%pull(Sample)))%>%
dplyr::rename("Sample"=sample)
#Filter single events that have two separate calls in the same sample (e.g. relating to the two ends of the change)
SV_change_df<-SV_data%>%
dplyr::filter(!(SV_data%>%dplyr::select(type,Sample,gene1)%>%duplicated()))%>%
mutate(event_length=ifelse(chro1==chro2,start2-start1,NA))
SV_change_df
SV_tables=lapply(all.trees.uncorrected,function(tree) {
SV_change_Ind<-SV_change_df%>%filter(Sample%in%tree$tip.label)
SV_change_Ind$node<-sapply(SV_change_Ind$Sample,function(SampleID) which(tree$tip.label==SampleID))
return(SV_change_Ind)
})
SV_tables=Map(SV_table=SV_tables,tree=all.trees.cc,function(SV_table,tree){
duplicate_sets=get_duplicate_sets(tree = tree,mut_threshold = 80)
SV_table$duplicate_status=sapply(SV_table$Sample,function(SampleID) {
which_set=sapply(duplicate_sets,function(set) SampleID %in% set)
if(any(which_set)) {
duplicate_set=duplicate_sets[which_set]
if(all(duplicate_set[[1]]%in%SV_table$Sample)) {
return("All_dups")
} else {
return("Not_all_dups")
}
} else {
return("No_duplicates")
}
})
return(SV_table)
})
SV_invitro=bind_rows(lapply(SV_tables,function(SV_table) SV_table%>%filter(duplicate_status=="Not_all_dups")%>%mutate(duplicate_status=as.character(duplicate_status))))
SV_tables=lapply(SV_tables,function(SV_table) SV_table%>%filter(duplicate_status!="Not_all_dups")%>%mutate(duplicate_status=as.character(duplicate_status)))
SV_tables
dplyr::bind_rows(SV_tables)
CN_change_df
CN_change_df=read.csv(paste0(root_dir,"/Data/Copy_number_changes.csv"))
CN_change_df<-CN_change_df%>%filter(Sample%in%unlist(lapply(all.trees.cc.nodups,function(tree) tree$tip.label)))
n_CN_events_df<-data.frame(ID=names(all.trees.cc.nodups),n_CNs=sapply(names(all.trees.cc.nodups),function(ID) sum(CN_change_df$Individual==ID)),total=sapply(all.trees.cc.nodups,function(tree) length(tree$tip.label)-1))%>%
left_join(Individual_metadata)
n_CN_events_df
SV_tables[[6]]
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID)%>%dplyr::summarise(n=n())
10/505
sample_metadata%>%filter(sample_status=="PASS" & Time_point==0)%>%group_by(new_ID)%>%dplyr::summarise(n=n())
8/238
#Proportion of colonies with an SV in Individuals
bind_rows(SV_tables)%>%
right_join(sample_metadata,by="Sample")%>%
filter(sample_status=="PASS")%>%
replace_na(replace=list(type="No_SV"))%>%
mutate(SV_status=ifelse(type=="No_SV","No_SV","SV_present"))%>%
group_by(SV_status,new_ID)%>%
dplyr::summarise(n=n())%>%
pivot_wider(names_from="SV_status",values_from="n")%>%
replace_na(replace=list(SV_present=0,No_SV=0))%>%
mutate(abnormal_prop=SV_present/(SV_present+No_SV),
CI_low=mapply(x=SV_present,n=(SV_present+No_SV),function(x,n){return(binom.test(x=x,n=n)$conf.int[1])}),
CI_high=mapply(x=SV_present,n=(SV_present+No_SV),function(x,n){return(binom.test(x=x,n=n)$conf.int[2])}))%>%
ggplot(aes(x=new_ID,y=100*abnormal_prop,ymin=100*CI_low,ymax=100*CI_high))+
geom_point()+
geom_errorbar(width=0.2)+
theme_classic()+
scale_y_continuous(limits=c(0,7))+
theme(legend.position = "none")+
labs(x="",y="Proportion of colonies with SV (%)")
bind_rows(SV_tables)%>%
right_join(sample_metadata,by="Sample")%>%
filter(sample_status=="PASS")%>%
replace_na(replace=list(type="No_SV"))%>%
mutate(SV_status=ifelse(type=="No_SV","No_SV","SV_present"))%>%
group_by(SV_status,new_ID)%>%
dplyr::summarise(n=n())
9/311
binom.test(9,312)
Individual_metadata
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID)%>%dplyr::summarise(n=n())
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(new_ID)%>%dplyr::summarise(n=n(),mean_cov=mean(Coverage))
sample_metadata%>%filter(sample_status=="PASS")%>%group_by(Time_point>0)%>%dplyr::summarise(n=n())
1/1161
100*1/1161
100*11/1431
fisher.test(matrix(c(1,1160,11,1420),ncol=2))
library(dplyr)
library(stringr)
#Summary stats data.frame
data_stats=data.frame(ID=c("BCL002","BCL003","BCL004","BCL006","BCL008","BCL009"),
n_post_GT_clones=c(420,358,292,143,143,74),
no_of_coalescences=c(3,5,0,0,1,2))
#
get_expanded_clade_nodes(all.trees.cc.nodups$BCL009,height_cut_off = 300,min_clonal_fraction = 0,min_samples = 2)
sample_metadata%>%dplyr::filter(sample_status=="PASS")%>%group_by(ID,Time_point>0)%>%dplyr::summarise(n=n())%>%filter(`Time_point > 0`)
#Pair metadata
#Manually enter the individual-level metadata data frame
exp_IDs<-c("BCL002","BCL003","BCL004","BCL006","BCL008","BCL009")
Individual_metadata=data.frame(ID=exp_IDs,
new_ID=c("SCD4","SCD6","SCD5","SCD3","SCD1","SCD2"),
Disease=rep("SCD",6),
Age_at_GT=c(20,26,24,16,7,13),
PD_no=c("PD49229","PD53373b","PD49228","PD53374b","PD49227","PD49226"),
CD34_dose=c(5.07,6.7,5.15,8.26,4.86,3.55))
## function to simply generate clone sizes from a birth process (much quicker than using RSimpop!!)
# generate_clone_sizes=function(n_engrafted,n_final){
#   cat(paste("Generating clone size information with",n_engrafted,"engrafting clones, and a final population of",n_final,"\n"))
#   clone_sizes=rep(1,n_engrafted) #all clones start with a population of 1
#   for(i in 1:(n_final-n_engrafted)){i=sample(x=n_engrafted,size=1,prob=clone_sizes);clone_sizes[i]<-clone_sizes[i]+1} # increment the population by 1 u
#   return(data.frame(clone=1:n_engrafted,size=clone_sizes))
# }
# all_n_engrafted=round(2^(seq(10,16.6,0.1)))
# all_n_final=c(1e5,2e5,5e5,1e6,2e6)
# clone_params_df=tidyr::expand_grid(all_n_engrafted,all_n_final)%>%dplyr::rename("n_engrafted"=all_n_engrafted,"final_population"=all_n_final)
# temp=lapply(1:nrow(clone_params_df),function(i) {
#   cat(i,sep="\n")
#   file_name=paste0("Clone_sizes_",clone_params_df$n_engrafted[i],"_",clone_params_df$final_population[i],".tsv")
#   if(!file.exists(file_name)){
#     clone_sizes=generate_clone_sizes(n_engrafted = clone_params_df$n_engrafted[i],n_final = clone_params_df$final_population[i])
#     write.table(clone_sizes,file=file_name,quote=F,sep="\t",row.names=F)
#   }
# })
##--------------------------Import the clone sizes data frames--------------------------
#clone_size_dir="/lustre/scratch119/realdata/mdt1/team154/ms56/gene_therapy/clone_size_distributions3"
clone_size_dir=paste0(root_dir,"/Data/Engrafting_cell_inference/Clone_sizes")
setwd(clone_size_dir)
clone_files=list.files(pattern="Clone_sizes_")
clone_sizes_list<-lapply(clone_files,function(file){
clone_sizes<-read.delim(file,stringsAsFactors = F)
return(clone_sizes)
})
clone_params_df<-lapply(clone_files,function(file){
n_engrafted<-stringr::str_split(file,pattern="_",simplify=T)[,3]
final_population<-gsub(".tsv","",stringr::str_split(file,pattern="_",simplify=T)[,4])
return(data.frame(n_engrafted=as.numeric(n_engrafted),final_population=as.numeric(final_population)))
})%>%dplyr::bind_rows()
names(clone_sizes_list)=apply(clone_params_df,1,paste,collapse="_")
#clone_params_df<-clone_params_df%>%filter(final_population>5e4)
##--------------------------Run the simulations & get posteriors--------------------------
sim_res_dir=paste0(root_dir,"/Data/Engrafting_cell_inference/Simulation_results/")
for(j in 1:nrow(data_stats)){
ID_to_run<-data_stats$ID[j]
cat(ID_to_run,sep="\n")
no_of_coalescences<-data_stats$no_of_coalescences[j]
n_post_GT_clones<-data_stats$n_post_GT_clones[j]
sim_res_file=paste0(sim_res_dir,"sim_res_",ID_to_run,".RDS")
if(file.exists(sim_res_file)) {
cat("Importing existing simulation results files")
sim_res<-readRDS(sim_res_file)
completed_params<-sim_res%>%
dplyr::select(n_engrafted,final_population)%>%
dplyr::filter(!duplicated(.))
new_params_df<-anti_join(clone_params_df,completed_params)
print(new_params_df)
#Update the sim_res object with any simulation results from clone distributions that weren't previously complete
if(nrow(new_params_df)>0){
iter=1e3
new_sim_res<-lapply(1:nrow(new_params_df),function(i) {
cat(i,sep = "\n")
clones_df<-clone_sizes_list[[paste(new_params_df[i,],collapse="_")]]
n_coalescneces_vec<-sapply(1:iter,function(j) {
pop_vec<-unlist(Map(clone=clones_df$clone,size=clones_df$size,f=function(clone,size) {rep(clone,size)}))
sampled_clones<-sample(pop_vec,size=n_post_GT_clones,replace=F)
#sampled_clones<-sample(clones_df$clone,size = n_post_GT_clones,replace = T,prob=clones_df$size)
n_coalescences=length(sampled_clones)-length(unique(sampled_clones))
return(n_coalescences)
})
return(data.frame(n_engrafted=new_params_df$n_engrafted[i],final_population=new_params_df$final_population[i],n_coalescences=n_coalescneces_vec))
})%>%dplyr::bind_rows()
sim_res<-bind_rows(sim_res,new_sim_res)
saveRDS(sim_res,file=sim_res_file)
}
} else {
cat("Running simulations")
iter=1e3
sim_res<-lapply(1:nrow(clone_params_df),function(i) {
cat(i)
clones_df<-clone_sizes_list[[paste(clone_params_df[i,],collapse="_")]]
n_coalescneces_vec<-sapply(1:iter,function(j) {
pop_vec<-unlist(Map(clone=clones_df$clone,size=clones_df$size,f=function(clone,size) {rep(clone,size)}))
sampled_clones<-sample(pop_vec,size=n_post_GT_clones,replace=F)
#sampled_clones<-sample(clones_df$clone,size = n_post_GT_clones,replace = T,prob=clones_df$size)
n_coalescences=length(sampled_clones)-length(unique(sampled_clones))
return(n_coalescences)
})
return(data.frame(n_engrafted=clone_params_df$n_engrafted[i],final_population=clone_params_df$final_population[i],n_coalescences=n_coalescneces_vec))
})%>%dplyr::bind_rows()
saveRDS(sim_res,file=sim_res_file)
}
}
##--------------------------Plot the results--------------------------
library(ggplot2)
library(dplyr)
my_theme<-theme(text = element_text(family="Helvetica"),
axis.text = element_text(size = 5),
axis.title = element_text(size=7),
legend.text = element_text(size=5),
legend.title = element_text(size=7),
strip.text = element_text(size=7),
legend.spacing = unit(1,"mm"),
legend.key.size= unit(5,"mm"))
res_df<-Map(ID_to_run=data_stats$ID,no_of_coalescences=data_stats$no_of_coalescences,f=function(ID_to_run,no_of_coalescences) {
sim_res_file=paste0(sim_res_dir,"sim_res_",ID_to_run,".RDS")
sim_res<-readRDS(sim_res_file)
total_sims<-sim_res%>%
#filter(final_population==5e5)%>%
group_by(n_engrafted)%>%
dplyr::summarise(total_sims_n=n())
sim_summary<-sim_res%>%
#filter(final_population<1e6)%>%
mutate(result=ifelse(n_coalescences==no_of_coalescences,"PASS","FAIL"))%>%
dplyr::count(n_engrafted,final_population,result)%>%
tidyr::complete(n_engrafted,final_population,result,fill=list(n=0))%>%
dplyr::mutate(prop=n/1000,ID=ID_to_run)
return(sim_summary)
})%>%bind_rows()%>%
left_join(Individual_metadata,by="ID")
#Now display as a posterior probability by dividing by the sum of simulations matching the data in each individual
#Calculate the sum of proportions
total_props<-res_df%>%
group_by(new_ID,n_engrafted,result)%>%
dplyr::summarise(n=sum(n))%>%
tidyr::pivot_wider(names_from="result",values_from="n")%>%
mutate(prop=PASS/(FAIL+PASS))%>%
dplyr::select(-FAIL)%>%
#pivot_wider(id_cols=c("new_ID","n_engrafted"),names_from="n_engrafted",values_from="prop")%>%
group_by(new_ID)%>%
dplyr::summarise(total_prop=sum(prop))
post_prob_df<-res_df%>%
group_by(new_ID,n_engrafted,result)%>%
dplyr::summarise(n=sum(n))%>%
tidyr::pivot_wider(names_from="result",values_from="n")%>%
mutate(prop=PASS/(FAIL+PASS))%>%
dplyr::select(-FAIL)%>%
left_join(total_props,by="new_ID")%>%
dplyr::mutate(prob=prop/total_prop)%>%
group_by(new_ID)%>%
dplyr::mutate(cum_prob=cumsum(prob))
post_prob_df
##Plot the engrafting CD34 estimates against the CD34 cell dose
all_post_samples<-lapply(paste0("SCD",1:6),function(ID) {
post_prob_this_ID<-post_prob_df%>%filter(new_ID==ID)
post<-sample(post_prob_this_ID$n_engrafted,size = 10000,replace = T,prob=post_prob_this_ID$prob)
return(data.frame(new_ID=ID,post=post))
})%>%dplyr::bind_rows()
post_vs_CD34<-all_post_samples%>%
left_join(Individual_metadata)%>%
ggplot(aes(x=CD34_dose,y=post,col=new_ID))+
geom_jitter(height=0.01,width=0.05,size=0.05,alpha=0.01)+
scale_y_log10(limits=c(1e2,1.1e5))+
scale_x_continuous(limits=c(1,10))+
scale_color_manual(values=patient_cols)+
theme_bw()+
my_theme+
guides(colour = guide_legend(override.aes = list(alpha = 1,size=1)))+
labs(x="CD34+ cell dose per kg",y="Posterior",col="ID")
post_vs_CD34
head(all_post_samples)
lapply(paste0("SCD",1:6),function(ID) quantile(all_post_samples%>%filter(new_ID==ID)%>%pull(post),c(0.025,0.5,0.975)))
